{"version":3,"sources":["../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedDate.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedExtra.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedLike.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedMeta.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedUser.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedSummary.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedContent.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedLabel.js","../node_modules/semantic-ui-react/dist/es/views/Feed/FeedEvent.js","../node_modules/semantic-ui-react/dist/es/views/Feed/Feed.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardDescription.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardMeta.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardGroup.js","../node_modules/semantic-ui-react/dist/es/views/Card/Card.js"],"names":["objectWithoutPropertiesLoose","__webpack_require__","module","exports","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","FeedDate","props","children","className","content","classes","classnames_default","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","lib","isNil","handledProps","propTypes","Feed_FeedDate","FeedExtra","images","text","classNameBuilders","imageElements","map_default","image","index","join","factories","Feed_FeedExtra","FeedLike","icon","Icon","create","autoGenerateKey","defaultProps","as","Feed_FeedLike","FeedMeta","like","val","Feed_FeedMeta","FeedUser","Feed_FeedUser","FeedSummary","date","user","Feed_FeedSummary","FeedContent","extraImages","extraText","meta","summary","Feed_FeedContent","FeedLabel","Feed_FeedLabel","FeedEvent","hasContentProp","contentProps","Feed_FeedEvent","Feed","events","size","eventElements","eventProps","childKey","eventData","objectWithoutProperties_default","finalKey","Content","Date","Event","Extra","Label","Like","Meta","Summary","User","__webpack_exports__","CardDescription","textAlign","Card_CardDescription","CardHeader","Card_CardHeader","CardMeta","Card_CardMeta","CardContent","description","extra","header","Card_CardContent","CardGroup","centered","doubling","items","itemsPerRow","stackable","itemsJSX","item","Card_Card","Card_CardGroup","d","_Component","Card","_getPrototypeOf2","_this","classCallCheck_default","this","_len","arguments","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","apply","concat","defineProperty_default","assertThisInitialized_default","e","onClick","inherits_default","createClass_default","value","_this$props","color","fluid","href","link","raised","handleClick","Image","react"],"mappings":"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","file":"static/js/13.1bb37dd2.chunk.js","sourcesContent":["var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * An event or an event summary can contain a date.\n */\n\nfunction FeedDate(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('date', className);\n  var rest = getUnhandledProps(FeedDate, props);\n  var ElementType = getElementType(FeedDate, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nFeedDate.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nFeedDate.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default FeedDate;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createHTMLImage, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A feed can contain an extra content.\n */\n\nfunction FeedExtra(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      images = props.images,\n      text = props.text;\n  var classes = cx(useKeyOnly(images, 'images'), useKeyOnly(content || text, 'text'), 'extra', className);\n  var rest = getUnhandledProps(FeedExtra, props);\n  var ElementType = getElementType(FeedExtra, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  } // TODO need a \"collection factory\" to handle creating multiple image elements and their keys\n\n\n  var imageElements = _map(images, function (image, index) {\n    var key = [index, image].join('-');\n    return createHTMLImage(image, {\n      key: key\n    });\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content, imageElements);\n}\n\nFeedExtra.handledProps = [\"as\", \"children\", \"className\", \"content\", \"images\", \"text\"];\nFeedExtra.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** An event can contain additional information like a set of images. */\n  images: customPropTypes.every([customPropTypes.disallow(['text']), PropTypes.oneOfType([PropTypes.bool, customPropTypes.collectionShorthand])]),\n\n  /** An event can contain additional text information. */\n  text: PropTypes.bool\n} : {};\nexport default FeedExtra;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A feed can contain a like element.\n */\n\nfunction FeedLike(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n  var classes = cx('like', className);\n  var rest = getUnhandledProps(FeedLike, props);\n  var ElementType = getElementType(FeedLike, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon, {\n    autoGenerateKey: false\n  }), content);\n}\n\nFeedLike.handledProps = [\"as\", \"children\", \"className\", \"content\", \"icon\"];\nFeedLike.defaultProps = {\n  as: 'a'\n};\nFeedLike.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for icon. Mutually exclusive with children. */\n  icon: customPropTypes.itemShorthand\n} : {};\nexport default FeedLike;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport FeedLike from './FeedLike';\n/**\n * A feed can contain a meta.\n */\n\nfunction FeedMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      like = props.like;\n  var classes = cx('meta', className);\n  var rest = getUnhandledProps(FeedMeta, props);\n  var ElementType = getElementType(FeedMeta, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedLike, function (val) {\n    return {\n      content: val\n    };\n  }, like, {\n    autoGenerateKey: false\n  }), content);\n}\n\nFeedMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"like\"];\nFeedMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for FeedLike. */\n  like: customPropTypes.itemShorthand\n} : {};\nexport default FeedMeta;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A feed can contain a user element.\n */\n\nfunction FeedUser(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('user', className);\n  var rest = getUnhandledProps(FeedUser, props);\n  var ElementType = getElementType(FeedUser, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nFeedUser.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nFeedUser.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nFeedUser.defaultProps = {\n  as: 'a'\n};\nexport default FeedUser;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport FeedDate from './FeedDate';\nimport FeedUser from './FeedUser';\n/**\n * A feed can contain a summary.\n */\n\nfunction FeedSummary(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      date = props.date,\n      user = props.user;\n  var classes = cx('summary', className);\n  var rest = getUnhandledProps(FeedSummary, props);\n  var ElementType = getElementType(FeedSummary, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedUser, function (val) {\n    return {\n      content: val\n    };\n  }, user, {\n    autoGenerateKey: false\n  }), content, createShorthand(FeedDate, function (val) {\n    return {\n      content: val\n    };\n  }, date, {\n    autoGenerateKey: false\n  }));\n}\n\nFeedSummary.handledProps = [\"as\", \"children\", \"className\", \"content\", \"date\", \"user\"];\nFeedSummary.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for FeedDate. */\n  date: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedUser. */\n  user: customPropTypes.itemShorthand\n} : {};\nexport default FeedSummary;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport FeedDate from './FeedDate';\nimport FeedExtra from './FeedExtra';\nimport FeedMeta from './FeedMeta';\nimport FeedSummary from './FeedSummary';\n\nfunction FeedContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      extraImages = props.extraImages,\n      extraText = props.extraText,\n      date = props.date,\n      meta = props.meta,\n      summary = props.summary;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(FeedContent, props);\n  var ElementType = getElementType(FeedContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedDate, function (val) {\n    return {\n      content: val\n    };\n  }, date, {\n    autoGenerateKey: false\n  }), createShorthand(FeedSummary, function (val) {\n    return {\n      content: val\n    };\n  }, summary, {\n    autoGenerateKey: false\n  }), content, createShorthand(FeedExtra, function (val) {\n    return {\n      text: true,\n      content: val\n    };\n  }, extraText, {\n    autoGenerateKey: false\n  }), createShorthand(FeedExtra, function (val) {\n    return {\n      images: val\n    };\n  }, extraImages, {\n    autoGenerateKey: false\n  }), createShorthand(FeedMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }));\n}\n\nFeedContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"date\", \"extraImages\", \"extraText\", \"meta\", \"summary\"];\nFeedContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** An event can contain a date. */\n  date: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedExtra with images. */\n  extraImages: FeedExtra.propTypes.images,\n\n  /** Shorthand for FeedExtra with text. */\n  extraText: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedSummary. */\n  summary: customPropTypes.itemShorthand\n} : {};\nexport default FeedContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createHTMLImage, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * An event can contain an image or icon label.\n */\n\nfunction FeedLabel(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon,\n      image = props.image;\n  var classes = cx('label', className);\n  var rest = getUnhandledProps(FeedLabel, props);\n  var ElementType = getElementType(FeedLabel, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content, Icon.create(icon, {\n    autoGenerateKey: false\n  }), createHTMLImage(image));\n}\n\nFeedLabel.handledProps = [\"as\", \"children\", \"className\", \"content\", \"icon\", \"image\"];\nFeedLabel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** An event can contain icon label. */\n  icon: customPropTypes.itemShorthand,\n\n  /** An event can contain image label. */\n  image: customPropTypes.itemShorthand\n} : {};\nexport default FeedLabel;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createShorthand, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport FeedContent from './FeedContent';\nimport FeedLabel from './FeedLabel';\n/**\n * A feed contains an event.\n */\n\nfunction FeedEvent(props) {\n  var content = props.content,\n      children = props.children,\n      className = props.className,\n      date = props.date,\n      extraImages = props.extraImages,\n      extraText = props.extraText,\n      image = props.image,\n      icon = props.icon,\n      meta = props.meta,\n      summary = props.summary;\n  var classes = cx('event', className);\n  var rest = getUnhandledProps(FeedEvent, props);\n  var ElementType = getElementType(FeedEvent, props);\n  var hasContentProp = content || date || extraImages || extraText || meta || summary;\n  var contentProps = {\n    content: content,\n    date: date,\n    extraImages: extraImages,\n    extraText: extraText,\n    meta: meta,\n    summary: summary\n  };\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedLabel, function (val) {\n    return {\n      icon: val\n    };\n  }, icon, {\n    autoGenerateKey: false\n  }), createShorthand(FeedLabel, function (val) {\n    return {\n      image: val\n    };\n  }, image, {\n    autoGenerateKey: false\n  }), hasContentProp && React.createElement(FeedContent, contentProps), children);\n}\n\nFeedEvent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"date\", \"extraImages\", \"extraText\", \"icon\", \"image\", \"meta\", \"summary\"];\nFeedEvent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for FeedContent. */\n  content: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedDate. */\n  date: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedExtra with images. */\n  extraImages: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedExtra with content. */\n  extraText: customPropTypes.itemShorthand,\n\n  /** An event can contain icon label. */\n  icon: customPropTypes.itemShorthand,\n\n  /** An event can contain image label. */\n  image: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedSummary. */\n  summary: customPropTypes.itemShorthand\n} : {};\nexport default FeedEvent;","import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI } from '../../lib';\nimport FeedContent from './FeedContent';\nimport FeedDate from './FeedDate';\nimport FeedEvent from './FeedEvent';\nimport FeedExtra from './FeedExtra';\nimport FeedLabel from './FeedLabel';\nimport FeedLike from './FeedLike';\nimport FeedMeta from './FeedMeta';\nimport FeedSummary from './FeedSummary';\nimport FeedUser from './FeedUser';\n/**\n * A feed presents user activity chronologically.\n */\n\nfunction Feed(props) {\n  var children = props.children,\n      className = props.className,\n      events = props.events,\n      size = props.size;\n  var classes = cx('ui', size, 'feed', className);\n  var rest = getUnhandledProps(Feed, props);\n  var ElementType = getElementType(Feed, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var eventElements = _map(events, function (eventProps) {\n    var childKey = eventProps.childKey,\n        date = eventProps.date,\n        meta = eventProps.meta,\n        summary = eventProps.summary,\n        eventData = _objectWithoutProperties(eventProps, [\"childKey\", \"date\", \"meta\", \"summary\"]);\n\n    var finalKey = childKey || [date, meta, summary].join('-');\n    return React.createElement(FeedEvent, _extends({\n      date: date,\n      key: finalKey,\n      meta: meta,\n      summary: summary\n    }, eventData));\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), eventElements);\n}\n\nFeed.handledProps = [\"as\", \"children\", \"className\", \"events\", \"size\"];\nFeed.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand array of props for FeedEvent. */\n  events: customPropTypes.collectionShorthand,\n\n  /** A feed can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive'))\n} : {};\nFeed.Content = FeedContent;\nFeed.Date = FeedDate;\nFeed.Event = FeedEvent;\nFeed.Extra = FeedExtra;\nFeed.Label = FeedLabel;\nFeed.Like = FeedLike;\nFeed.Meta = FeedMeta;\nFeed.Summary = FeedSummary;\nFeed.User = FeedUser;\nexport default Feed;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a description with one or more paragraphs.\n */\n\nfunction CardDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'description', className);\n  var rest = getUnhandledProps(CardDescription, props);\n  var ElementType = getElementType(CardDescription, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardDescription.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardDescription.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardDescription;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain content metadata.\n */\n\nfunction CardMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'meta', className);\n  var rest = getUnhandledProps(CardMeta, props);\n  var ElementType = getElementType(CardMeta, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card meta can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardMeta;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useWidthProp } from '../../lib';\nimport Card from './Card';\n/**\n * A group of cards.\n */\n\nfunction CardGroup(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      doubling = props.doubling,\n      items = props.items,\n      itemsPerRow = props.itemsPerRow,\n      stackable = props.stackable,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);\n  var rest = getUnhandledProps(CardGroup, props);\n  var ElementType = getElementType(CardGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  var itemsJSX = _map(items, function (item) {\n    var key = item.key || [item.header, item.description].join('-');\n    return React.createElement(Card, _extends({\n      key: key\n    }, item));\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), itemsJSX);\n}\n\nCardGroup.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"content\", \"doubling\", \"items\", \"itemsPerRow\", \"stackable\", \"textAlign\"];\nCardGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A group of cards can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A group of cards can double its column width for mobile. */\n  doubling: PropTypes.bool,\n\n  /** Shorthand array of props for Card. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A group of cards can set how many cards should exist in a row. */\n  itemsPerRow: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A group of cards can automatically stack rows to a single columns on mobile devices. */\n  stackable: PropTypes.bool,\n\n  /** A card group can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport Image from '../../elements/Image';\nimport CardContent from './CardContent';\nimport CardDescription from './CardDescription';\nimport CardGroup from './CardGroup';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card displays site content in a manner similar to a playing card.\n */\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      var onClick = _this.props.onClick;\n      if (onClick) onClick(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          centered = _this$props.centered,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          content = _this$props.content,\n          description = _this$props.description,\n          extra = _this$props.extra,\n          fluid = _this$props.fluid,\n          header = _this$props.header,\n          href = _this$props.href,\n          image = _this$props.image,\n          link = _this$props.link,\n          meta = _this$props.meta,\n          onClick = _this$props.onClick,\n          raised = _this$props.raised;\n      var classes = cx('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);\n      var rest = getUnhandledProps(Card, this.props);\n      var ElementType = getElementType(Card, this.props, function () {\n        if (onClick) return 'a';\n      });\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), children);\n      }\n\n      if (!childrenUtils.isNil(content)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), content);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), Image.create(image, {\n        autoGenerateKey: false\n      }), (description || header || meta) && React.createElement(CardContent, {\n        description: description,\n        header: header,\n        meta: meta\n      }), extra && React.createElement(CardContent, {\n        extra: true\n      }, extra));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\n_defineProperty(Card, \"Content\", CardContent);\n\n_defineProperty(Card, \"Description\", CardDescription);\n\n_defineProperty(Card, \"Group\", CardGroup);\n\n_defineProperty(Card, \"Header\", CardHeader);\n\n_defineProperty(Card, \"Meta\", CardMeta);\n\n_defineProperty(Card, \"handledProps\", [\"as\", \"centered\", \"children\", \"className\", \"color\", \"content\", \"description\", \"extra\", \"fluid\", \"header\", \"href\", \"image\", \"link\", \"meta\", \"onClick\", \"raised\"]);\n\nexport { Card as default };\nCard.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A Card can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A Card can be formatted to display different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Shorthand for primary content of CardContent. */\n  extra: customPropTypes.contentShorthand,\n\n  /** A Card can be formatted to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: PropTypes.string,\n\n  /** A card can contain an Image component. */\n  image: customPropTypes.itemShorthand,\n\n  /** A card can be formatted to link to other content. */\n  link: PropTypes.bool,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /**\n   * Called on click. When passed, the component renders as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A Card can be formatted to raise above the page. */\n  raised: PropTypes.bool\n} : {};"],"sourceRoot":""}